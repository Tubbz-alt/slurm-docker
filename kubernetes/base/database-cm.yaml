
# Headless service for stable DNS entries of StatefulSet members.
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    role: database
---

apiVersion: v1
kind: Service
metadata:
  name: mysql-0
spec:
  ports:
  - name: mysql
    port: 3306
  - name: xtrabackup
    port: 3307
  - name: group
    port: 24901
  selector:
    role: database
    statefulset.kubernetes.io/pod-name: mysql-0

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-1
spec:
  ports:
  - name: mysql
    port: 3306
  - name: xtrabackup
    port: 3307
  - name: group
    port: 24901
  selector:
    role: database
    statefulset.kubernetes.io/pod-name: mysql-1
---

apiVersion: v1
kind: Service
metadata:
  name: mysql-2
spec:
  ports:
  - name: mysql
    port: 3306
  - name: xtrabackup
    port: 3307
  - name: group
    port: 24901
  selector:
    role: database
    statefulset.kubernetes.io/pod-name: mysql-2
---
# Client service for connecting to any MySQL instance for reads.
apiVersion: v1
kind: Service
metadata:
  name: mysql-active
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    role: database

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  labels:
    role: database
data:
  master-master.cnf: |
    # Apply this config only on the group replication in multi-master.
    [mysqld]
    gtid_mode=ON
    enforce_gtid_consistency=ON
    master_info_repository=TABLE
    relay_log_info_repository=TABLE
    binlog_checksum=NONE
    log_slave_updates=ON
    log_bin=binlog
    binlog_format=ROW
    transaction_write_set_extraction=XXHASH64
    loose-group_replication_group_name="b7735f3a-99b0-4ccb-a3b8-25df64122af9"
    loose-group_replication_start_on_boot=OFF
    loose-group_replication_bootstrap_group=OFF
    loose-group_replication_ip_whitelist=10.0.0.0/8
    loose-group_replication_single_primary_mode=OFF
    event_scheduler=OFF
    innodb_buffer_pool_size=3072M
    innodb_log_file_size=64M
    innodb_lock_wait_timeout=900
  int-mysql.sh: |
    #!/bin/bash
    set -ex
    # Generate mysql server-id from pod ordinal index.
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}
    echo [mysqld] > /mnt/conf.d/server-id.cnf
    # Add an offset to avoid reserved server-id=0 value.
    echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
    # Copy appropriate conf.d files from config-map to emptyDir.
    cp /mnt/config-map/master-master.cnf /mnt/conf.d/
    echo "loose-group_replication_local_address=mysql-$ordinal:24901" >> /mnt/conf.d/master-master.cnf
    echo "loose-group_replication_group_seeds=mysql-0:24901,mysql-1:24901,mysql-2:24901" >> /mnt/conf.d/master-master.cnf
    echo "report_host=mysql-$ordinal" >> /mnt/conf.d/master-master.cnf
    if [[ $ordinal -ne 0 ]]; then
      echo "super_read_only=ON" >> /mnt/conf.d/master-master.cnf
    fi
  clone-mysql.sh: |
    #!/bin/bash
    set -ex
    # Skip the clone if data already exists.
    # TODO: think of something like: if data older than 24h- overwrit it!
    [[ -d /var/lib/mysql/mysql ]] && exit 0
    # Skip the clone on master (ordinal index 0).
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}
    [[ $ordinal -eq 0 ]] && exit 0
    # Add support to crashed master
    # Clone data from previous peer.
    ncat --recv-only mysql-$(($ordinal-1)) 3307 | xbstream -x -C /var/lib/mysql
    # Prepare the backup.
    xtrabackup --prepare --target-dir=/var/lib/mysql
    date +%s > /var/lib/mysql/timestamp
    rm -rf /var/lib/mysql/auto.cnf
  xtrabackup.sh: |
    #!/bin/bash
    set -ex
    # Generate mysql server-id from pod ordinal index.
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}

    # setup
    if [[ $ordinal -eq 0 && ! -f /var/lib/mysql/configured ]]; then
      echo "Setting up initial configuration..."
      until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 2; done
      bash /mnt/config-map/config.sh
      date > /var/lib/mysql/configured
    fi

    # wait for group communication to be ready
    echo "Waiting for mysqld to be ready (accepting connections)"
    until mysql -u rpl_user --password=password -h mysql-$ordinal.mysql -e "SELECT 1"; do sleep 2; done

    # setup group membership
    replication_group_members=`mysql -h mysql-active -sNe \
     "SELECT count(*) FROM performance_schema.replication_group_members WHERE MEMBER_STATE='ONLINE'"`
    echo "Found $replication_group_members active..."
    if [[ $ordinal -eq 0 && ! -f /var/lib/mysql/bootstraped && $replication_group_members -eq 0 ]]; then
      echo "Bootstraping group replication cluster..."
      bash /mnt/config-map/bootstrap-repl.sh
      date > /var/lib/mysql/bootstraped
    else
      # If data are copied by xtrabackup, set @@GLOBAL.GTID_PURGED and start replication
      echo "Starting group replication..."
      cd /var/lib/mysql
      bash /mnt/config-map/repl.sh
    fi
    cd /var/lib/mysql
    # Start a server to send backups when requested by peers.
    exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
      "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
  config.sh: |
    #!/bin/bash
    set -ex
    mysql -h 127.0.0.1 -e "SET SQL_LOG_BIN=OFF"
    mysql -h 127.0.0.1 -e "CREATE USER rpl_user@'%' IDENTIFIED BY 'password'"
    mysql -h 127.0.0.1 -e "GRANT REPLICATION SLAVE ON *.* TO rpl_user@'%'"
    mysql -h 127.0.0.1 -e "FLUSH PRIVILEGES"
    mysql -h 127.0.0.1 -e "CHANGE MASTER TO MASTER_USER='rpl_user', MASTER_PASSWORD='password' FOR CHANNEL 'group_replication_recovery'"
    mysql -h 127.0.0.1 -e "INSTALL PLUGIN group_replication SONAME 'group_replication.so'"
  repl.sh: |
    #!/bin/bash
    set -ex
    cd /var/lib/mysql
    if [[ -f xtrabackup_binlog_info ]]; then
      echo "starting replication from backup..."
      [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
      ordinal=${BASH_REMATCH[1]}
      [[ `cat xtrabackup_binlog_info | tr -d  '\n'` =~ ^(.*?)[[:space:]]+(.*?)[[:space:]]+(.*?)$ ]] || exit 1
      mysql -h 127.0.0.1 -e "SET global event_scheduler=OFF"
      mysql -h 127.0.0.1 -e "SET SQL_LOG_BIN=OFF"
      mysql -h 127.0.0.1 -e "RESET MASTER"
      mysql -h 127.0.0.1 -e "RESET SLAVE ALL"
      mysql -h 127.0.0.1 -e "SET @@GLOBAL.GTID_PURGED='${BASH_REMATCH[3]}'"
      mysql -h 127.0.0.1 -e "CHANGE MASTER TO MASTER_USER='rpl_user', MASTER_PASSWORD='password' FOR CHANNEL 'group_replication_recovery'"
      mysql -h 127.0.0.1 -e "SET SQL_LOG_BIN=ON"
      mysql -h 127.0.0.1 -e "START GROUP_REPLICATION" 2>&1 | awk '/group is already running/{ exit 0 }{ print $0; exit 127 }'
      mysql -h 127.0.0.1 -e "SET global event_scheduler=ON"
      mv xtrabackup_binlog_info xtrabackup_binlog_info.bck
    else
      echo "starting replication...."
      mysql -h 127.0.0.1 -e "START GROUP_REPLICATION" 2>&1 | awk '/group is already running/{ exit 0 }{ print $0; exit 127 }'
    fi
    echo "done!"
  bootstrap-repl.sh: |
    #!/bin/bash
    set -ex
    mysql -h 127.0.0.1 -e "SET SQL_LOG_BIN=OFF"
    mysql -h 127.0.0.1 -e "SET GLOBAL group_replication_bootstrap_group=ON"
    mysql -h 127.0.0.1 -e "START GROUP_REPLICATION" 2>&1 | awk '/group is already running/{ exit 0 }{ print $0; exit 127 }'
    mysql -h 127.0.0.1 -e "SET GLOBAL group_replication_bootstrap_group=OFF"
    mysql -h 127.0.0.1 -e "SET global event_scheduler=ON"
    mysql -h 127.0.0.1 -e "SET SQL_LOG_BIN=ON"
  readiness.sh: |
    #!/bin/bash
    set -ex
    #[[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    #ordinal=${BASH_REMATCH[1]}
    #MEMBERS=$(mysql -sN -h 127.0.0.1 -e "SELECT COUNT(*) FROM performance_schema.replication_group_members" )
    #if [[ $ordinal -gt 0 && $MEMBERS -le $ordinal ]]; then
    #  echo "ERROR! Number of group members is smaller than the ordinal of this mysql service!"
    #  exit 1
    #fi
    mysql -sN -h 127.0.0.1 -e "SELECT * FROM performance_schema.replication_group_members WHERE MEMBER_HOST = '$HOSTNAME' AND MEMBER_STATE='ONLINE'" | grep $HOSTNAME

